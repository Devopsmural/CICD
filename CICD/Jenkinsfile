pipeline {
 agent none
 options {  
     timeout(time: 10, unit: 'MINUTES') 
 }
 
 stages
 {
  stage('Checkout')
  {
  agent { label 'test' }
   steps { 
    git branch: 'master', url: 'https://github.com/Devopsmural/CICD.git'
   }
  }
  
  stage('Build Artifacts')
  {
   agent { label 'test' }
   steps { 
        dir ("/tmp/slave1/workspace/Demo_Pipeline/CICD/samplejar") {
           sh "mvn clean package "
		}
		dir ("/tmp/slave1/workspace/Demo_Pipeline/CICD/samplewar") {
           sh "mvn clean package "
		}
   }
  }
  
  stage('Code Coverage')
  {
   agent { label 'test' }
   steps {
     echo "Running Code Coverage ..."  
	 dir ("./CICD/samplewar") {
	   sh "mvn  org.jacoco:jacoco-maven-plugin:0.5.5.201112152213:prepare-agent"
	 }
   }
  }
 stage('Upload Artifactory')
  {
  when { environment name: 'BUILDME', value: 'yes' }
    agent { label 'test' }
    steps {
      script {
              /*define the artifactory server details */
            def server = Artifactory.server 'artifactoryid'
            def uploadSpec = """{
                "files": [{
                "pattern": "./CICD/samplewar",
                "target": "myartifactory"
                }]
            }"""  
            server.upload(uploadSpec)
          }
        }
      }

  stage('SonarQube Analysis') 
  {
    agent { label 'test' }
    steps{
     withSonarQubeEnv('mysonarqube') {
	  dir ("./CICD/samplejar") {
         sh 'mvn sonar:sonar'
	  }
     } 
    }
  }
  
  stage('Build Image') 
  {
    agent { label 'test' }
    steps{
      script {
          docker.withRegistry( 'https://registry.hub.docker.com', 'dockerlogin' ) {
             /* Build Docker Image locally */
             myImage = docker.build("sharandevop/cloudstack")

             /* Push the container to the Registry */
             myImage.push()
          }
      }
    }
  }

  stage('Smoke Test')
  {
    agent { label 'test' }
    steps {
      sh "chmod +x runsanity.sh; ./runsanity.sh sharandevop/cloudstack"
    }
  }

 } //End of Stages
}
